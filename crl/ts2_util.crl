#  Source for VME control of Trigger Supervisor (Revision 2)
#    CODA 2.0 readout list
#    Requires tsUtil.o library to be loaded
#    David Abbott, JLAB 2001

readout list TS2L
maximum 256,500
polling
vme readout


begin download

# Initiailize Trigger Supervisor (default Address)
# and TIR even if there is not one in the crate.
  tsInit(0,0);
  tirInit(0);

  log inform "User Download Executed"

end download
    
begin prestart

  log inform "Entering User Prestart"

  init trig source VME
  link sync trig source VME 1 to ts_trig and ts_trig_done
  event type 1 then read VME 1


%%
  tsReset(0);                   /* Initialize */
  tsCsr2Set(TS_CSR2_LOCK_ALL);  /* ROC Lock mode on all BRANCHES */
  tsEnableInput(0xfff,0);       /* Enable all Trigger inputs in non-strobe mode */
  tsRoc(0,0,0,1);               /* Enable ACK 0,1 on BRANCH 1  and ACK 2 on Branch 2*/

/* Synchronization programming */
  tsSync(100);                      /* schedule Sync every 100th physics trigger */
  tsCsr2Set(TS_CSR2_ENABLE_SYNC);   /* Enable Scheduled syncs */ 

/* Set nominal Level 2/3 timer values */
  tsTimerWrite(TS_TIMER_L2A,0x05);   /* Level 2 Timer 40ns/count */
  tsTimerWrite(TS_TIMER_L3A,0x05);   /* Level 3 Timer 40ns/count */

/* Front End Busy timer 40ns/count */
  tsTimerWrite(TS_TIMER_FB,250);         /* 250 = 10 microsec */   
  tsCsr2Set(TS_CSR2_ENABLE_FB_TIMER);    /* Enable FEB Timer */

/*  Construct TS memory data  ---  in the following model, all trigger patterns 
    that form the memory address are assigned to trigger class 1.  For those 
    trigger patterns with a single hit, the ROC code is set to be the trigger 
    input number.  Otherwise, the ROC code is set to 0xE.  All LEVEL 1 ACCEPT 
    signals are asserted for every pattern.  */
   
  tsMemInit(0);

/* Fix special cases - both inputs 1 and 2 firing - type 13 (0xd) */
  tsMemWrite(3,0xffd3);

/* Set specific input prescale factors */
  tsPrescale(1,0);
  tsPrescale(2,0);

%%

  log inform "User Prestart Executed"

end prestart

begin end

  variable trig_count

# Disable trigger supervisor, and L1 enable
  tsStop(1);

# Get Final Trigger Count
  trig_count = tsScalRead(TS_SCALER_EVENT,0);
  printf("TS Event Scaler Count = %d\n",trig_count);

  log inform "User End Executed"

end end

begin pause

  tsStop(1);

  log inform "User Pause Executed"

end pause

begin go

  log inform "Entering User Go"

  tsGo(1);  /* Enable TS and L1 */


end go


begin trigger ts_trig


end trigger


begin done ts_trig

end done


begin done

end done


begin status

end status

